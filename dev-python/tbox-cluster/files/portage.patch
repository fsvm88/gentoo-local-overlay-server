diff -Nuar tbox-cluster-9999.orig/pym/tbc/actions.py tbox-cluster-9999/pym/tbc/actions.py
--- tbox-cluster-9999.orig/pym/tbc/actions.py	2015-12-02 22:25:11.214598098 +0100
+++ tbox-cluster-9999/pym/tbc/actions.py	2015-12-02 22:25:33.815726119 +0100
@@ -81,7 +81,7 @@
 from _emerge.Package import Package
 from _emerge.ProgressHandler import ProgressHandler
 from _emerge.RootConfig import RootConfig
-from _emerge.Scheduler import Scheduler
+from tbc.Scheduler import Scheduler
 from _emerge.search import search
 from _emerge.SetArg import SetArg
 from _emerge.show_invalid_depstring_notice import show_invalid_depstring_notice
@@ -90,6 +90,8 @@
 from _emerge.UseFlagDisplay import pkg_use_display
 from _emerge.UserQuery import UserQuery
 
+from tbc.build_depgraph import build_mydepgraph
+
 if sys.hexversion >= 0x3000000:
 	long = int
 	_unicode = str
@@ -97,7 +99,7 @@
 	_unicode = unicode
 
 def action_build(settings, trees, mtimedb,
-	myopts, myaction, myfiles, spinner):
+	myopts, myaction, myfiles, spinner, build_dict, session):
 
 	if '--usepkgonly' not in myopts:
 		old_tree_timestamp_warn(settings['PORTDIR'], settings)
@@ -319,16 +321,10 @@
 			print(darkgreen("emerge: It seems we have nothing to resume..."))
 			return os.EX_OK
 
-		try:
-			success, mydepgraph, favorites = backtrack_depgraph(
-				settings, trees, myopts, myparams, myaction, myfiles, spinner)
-		except portage.exception.PackageSetNotFound as e:
-			root_config = trees[settings['EROOT']]['root_config']
-			display_missing_pkg_set(root_config, e.value)
-			return 1
+		success, settings, trees, mtimedb, mydepgraph = build_mydepgraph(settings,
+			trees, mtimedb, myopts, myparams, myaction, myfiles, spinner, build_dict, session)
 
 		if not success:
-			mydepgraph.display_problems()
 			return 1
 
 	mergecount = None
@@ -637,7 +633,7 @@
 	# The calculation is done in a separate function so that depgraph
 	# references go out of scope and the corresponding memory
 	# is freed before we call unmerge().
-	rval, cleanlist, ordered, req_pkg_count = \
+	rval, cleanlist, ordered, req_pkg_count, unresolvable = \
 		calc_depclean(settings, trees, ldpath_mtimes,
 			myopts, action, args_set, spinner)
 
@@ -860,7 +856,7 @@
 	resolver.display_problems()
 
 	if not success:
-		return 1, [], False, 0
+		return 1, [], False, 0, []
 
 	def unresolved_deps():
 
@@ -891,7 +887,7 @@
 				level=logging.WARNING, noiselevel=-1)
 
 		if not unresolvable:
-			return False
+			return None
 
 		if unresolvable and not allow_missing_deps:
 
@@ -941,11 +937,12 @@
 					"dependencies then use %s." % good("--nodeps"))
 			writemsg_level("".join("%s%s\n" % (prefix, line) for line in msg),
 				level=logging.ERROR, noiselevel=-1)
-			return True
-		return False
+			return unresolvable
+		return None
 
-	if unresolved_deps():
-		return 1, [], False, 0
+	unresolvable = unresolved_deps()
+	if not unresolvable is None:
+		return 1, [], False, 0, unresolvable
 
 	graph = resolver._dynamic_config.digraph.copy()
 	required_pkgs_total = 0
@@ -1246,7 +1243,7 @@
 							runtime_slot_op=True),
 						root=pkg.root)):
 						resolver.display_problems()
-						return 1, [], False, 0
+						return 1, [], False, 0, []
 
 			writemsg_level("\nCalculating dependencies  ")
 			success = resolver._complete_graph(
@@ -1254,9 +1251,10 @@
 			writemsg_level("\b\b... done!\n")
 			resolver.display_problems()
 			if not success:
-				return 1, [], False, 0
-			if unresolved_deps():
-				return 1, [], False, 0
+				return 1, [], False, 0, []
+			unresolvable = unresolved_deps()
+			if not unresolvable is None:
+				return 1, [], False, 0, unresolvable
 
 			graph = resolver._dynamic_config.digraph.copy()
 			required_pkgs_total = 0
@@ -1265,7 +1263,7 @@
 					required_pkgs_total += 1
 			cleanlist = create_cleanlist()
 			if not cleanlist:
-				return 0, [], False, required_pkgs_total
+				return 0, [], False, required_pkgs_total, []
 			clean_set = set(cleanlist)
 
 	if clean_set:
@@ -1383,8 +1381,8 @@
 					graph.remove(node)
 					cleanlist.append(node.cpv)
 
-		return 0, cleanlist, ordered, required_pkgs_total
-	return 0, [], False, required_pkgs_total
+		return 0, cleanlist, ordered, required_pkgs_total, []
+	return 0, [], False, required_pkgs_total, []
 
 def action_deselect(settings, trees, opts, atoms):
 	enter_invalid = '--ask-enter-invalid' in opts
@@ -1821,11 +1819,8 @@
 			unset_vars.append(k)
 	if unset_vars:
 		append("Unset:  "+", ".join(unset_vars))
-	append("")
-	append("")
-	writemsg_stdout("\n".join(output_buffer),
-		noiselevel=-1)
-	del output_buffer[:]
+
+	return False, output_buffer
 
 	# If some packages were found...
 	if mypkgs:
@@ -2756,7 +2751,7 @@
 
 	return bool(ignored_repos)
 
-def run_action(emerge_config):
+def run_action(emerge_config, build_dict, session):
 
 	# skip global updates prior to sync, since it's called after sync
 	if emerge_config.action not in ('help', 'info', 'sync', 'version') and \
@@ -3228,7 +3223,7 @@
 		retval = action_build(emerge_config.target_config.settings,
 			emerge_config.trees, emerge_config.target_config.mtimedb,
 			emerge_config.opts, emerge_config.action,
-			emerge_config.args, spinner)
+			emerge_config.args, spinner, build_dict, session)
 		post_emerge(emerge_config.action, emerge_config.opts,
 			emerge_config.args, emerge_config.target_config.root,
 			emerge_config.trees, emerge_config.target_config.mtimedb, retval)
diff -Nuar tbox-cluster-9999.orig/pym/tbc/main.py tbox-cluster-9999/pym/tbc/main.py
--- tbox-cluster-9999.orig/pym/tbc/main.py	2015-12-02 22:25:11.220597866 +0100
+++ tbox-cluster-9999/pym/tbc/main.py	2015-12-02 22:25:33.815726119 +0100
@@ -14,7 +14,7 @@
 	'portage.dep:Atom',
 	'portage.util:writemsg_level',
 	'textwrap',
-	'_emerge.actions:load_emerge_config,run_action,' + \
+	'tbc.actions:load_emerge_config,run_action,' + \
 		'validate_ebuild_environment',
 	'_emerge.help:help@emerge_help',
 	'_emerge.is_valid_package_atom:insert_category_into_atom'
@@ -1060,15 +1060,20 @@
 		return 1
 	return os.EX_OK
 
-def emerge_main(args=None):
+def emerge_main(args=None, build_dict=None, session=None):
 	"""
 	@param args: command arguments (default: sys.argv[1:])
 	@type args: list
+	@param build_dict: info of the build_job
+	@type build_dict: dict
 	"""
 	if args is None:
 		args = sys.argv[1:]
 
 	args = portage._decode_argv(args)
+	
+	if build_dict is None:
+		build_dict = {}
 
 	# Use system locale.
 	try:
@@ -1171,7 +1176,7 @@
 		parse_opts(tmpcmdline)
 
 	try:
-		return run_action(emerge_config)
+		return run_action(emerge_config, build_dict, session)
 	finally:
 		# Call destructors for our portdbapi instances.
 		for x in emerge_config.trees.values():
diff -Nuar tbox-cluster-9999.orig/pym/tbc/repoman/main.py tbox-cluster-9999/pym/tbc/repoman/main.py
--- tbox-cluster-9999.orig/pym/tbc/repoman/main.py	2015-12-02 22:25:11.234597326 +0100
+++ tbox-cluster-9999/pym/tbc/repoman/main.py	2015-12-02 22:25:33.817726042 +0100
@@ -46,8 +46,9 @@
 os.umask(0o22)
 
 
-def repoman_main(argv):
-	config_root = os.environ.get("PORTAGE_CONFIGROOT")
+def repoman_main(argv, config_root=None, pkgdir=None):
+	if config_root is None:
+		config_root = os.environ.get("PORTAGE_CONFIGROOT")
 	repoman_settings = portage.config(config_root=config_root, local_config=False)
 
 	if repoman_settings.get("NOCOLOR", "").lower() in ("yes", "true") or \
@@ -72,6 +73,9 @@
 	# commit (like if Manifest generation fails).
 	can_force = True
 
+	if not pkgdir is None:
+            os.chdir(pkgdir)
+
 	portdir, portdir_overlay, mydir = utilities.FindPortdir(repoman_settings)
 	if portdir is None:
 		sys.exit(1)
@@ -160,10 +164,4 @@
 	qa_output = qa_output.getvalue()
 	qa_output = qa_output.splitlines(True)
 
-	# output the results
-	actions = Actions(repo_settings, options, scanner, vcs_settings)
-	if actions.inform(can_force, result):
-		# perform any other actions
-		actions.perform(qa_output)
-
-	sys.exit(0)
+	return qatracker, qawarnings
diff -Nuar tbox-cluster-9999.orig/pym/tbc/Scheduler.py tbox-cluster-9999/pym/tbc/Scheduler.py
--- tbox-cluster-9999.orig/pym/tbc/Scheduler.py	2015-12-02 22:25:11.225597673 +0100
+++ tbox-cluster-9999/pym/tbc/Scheduler.py	2015-12-02 22:25:33.816726081 +0100
@@ -62,6 +62,8 @@
 from _emerge.PollScheduler import PollScheduler
 from _emerge.SequentialTaskQueue import SequentialTaskQueue
 
+from tbc.build_log import add_buildlog_main
+
 if sys.hexversion >= 0x3000000:
 	basestring = str
 
@@ -1282,8 +1284,9 @@
 
 	def _do_merge_exit(self, merge):
 		pkg = merge.merge.pkg
+		settings = merge.merge.settings
+		trees = self.trees
 		if merge.returncode != os.EX_OK:
-			settings = merge.merge.settings
 			build_dir = settings.get("PORTAGE_BUILDDIR")
 			build_log = settings.get("PORTAGE_LOG_FILE")
 
@@ -1294,6 +1297,7 @@
 			if not self._terminated_tasks:
 				self._failed_pkg_msg(self._failed_pkgs[-1], "install", "to")
 				self._status_display.failed = len(self._failed_pkgs)
+			add_buildlog_main(settings, pkg, trees)
 			return
 
 		if merge.postinst_failure:
@@ -1323,6 +1327,7 @@
 				self._pkg_cache.pop(pkg_to_replace, None)
 
 		if pkg.installed:
+			add_buildlog_main(settings, pkg, trees)
 			return
 
 		# Call mtimedb.commit() after each merge so that
@@ -1333,6 +1338,7 @@
 		if not mtimedb["resume"]["mergelist"]:
 			del mtimedb["resume"]
 		mtimedb.commit()
+		add_buildlog_main(settings, pkg, trees)
 
 	def _build_exit(self, build):
 		self._running_tasks.pop(id(build), None)
@@ -1357,6 +1363,8 @@
 				self._status_display.merges = len(self._task_queues.merge)
 		else:
 			settings = build.settings
+			trees = self.trees
+			pkg = build.pkg
 			build_dir = settings.get("PORTAGE_BUILDDIR")
 			build_log = settings.get("PORTAGE_LOG_FILE")
 
@@ -1368,6 +1376,7 @@
 				self._failed_pkg_msg(self._failed_pkgs[-1], "emerge", "for")
 				self._status_display.failed = len(self._failed_pkgs)
 			self._deallocate_config(build.settings)
+			add_buildlog_main(settings, pkg, trees)
 		self._jobs -= 1
 		self._status_display.running = self._jobs
 		self._schedule()
